{"version":3,"sources":["components/CoopViewComponent.js","components/ProducerViewComponent.js","components/BuyerSheet.js","App.js","reportWebVitals.js","index.js"],"names":["CoopViewComponent","componentDidMount","console","log","state","handleFormProduct","event","setState","formProduct","target","value","handleFormPrice","formPrice","handleFormDemand","formDemand","handleFormNegotiable","formNegotiable","handleSubmit","id","activeListings","length","negotiableVar","submission","product","pricePerPound","demandInPounds","toBeDelivered","negotiable","push","updatedArray","toggleAddListing","prevState","addListingToggled","pendingOffers","seller","poundsOfProduct","listArray","this","className","map","listing","onClick","bind","onChange","type","placeholder","offer","class","React","Component","CheckOut","produceArray","rows","row","produceType","demand","price","Buyer","Negotiable","Button","styled","button","BuyerSheet","useState","data","setData","print","setPrint","date","setDate","modalIsOpen","setModalIsOpen","val","warn","isOpen","App","to","path","component","ProducerViewComponent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b5dd5b5c.chunk.js","sourcesContent":["import React from 'react';\nimport 'semantic-ui-css/semantic.min.css';\nimport { Modal, Button } from 'react-bootstrap';\n\nclass CoopViewComponent extends React.Component {\n    constructor(){\n        super()\n\n        this.state = {\n            activeListings: [{\n                id: 0,\n                product: \"Carrots\",\n                pricePerPound: 2.77,\n                demandInPounds: 74,\n                toBeDelivered: 13,\n                negotiable: false,\n            }, {\n                id: 1,\n                product: \"Beans\",\n                pricePerPound: 2.55,\n                demandInPounds: 83,\n                toBeDelivered: 10,\n                negotiable: true\n            }],\n            formProduct: \"\",\n            formPrice: 0,\n            formDemand: 0,\n            formNegotiable: false,\n            pendingOffers: [{\n                id: 0,\n                seller: \"Russel Westbrook\",\n                product: \"Brussel Sprouts\",\n                pricePerPound: 1.22,\n                poundsOfProduct: 54\n            }],\n            toBeDelivered: [],\n            addListingToggled: false,\n        }\n    }\n\n    componentDidMount = () => {\n        console.log(this.state)\n    }\n\n    handleFormProduct = (event) => {\n        this.setState({\n            formProduct: event.target.value\n        })\n        console.log(event.target.value)\n    }\n\n    handleFormPrice = (event) => {\n        this.setState({\n            formPrice: event.target.value\n        })\n        console.log(event.target.value)\n    }\n\n    handleFormDemand = (event) => {\n        this.setState({\n            formDemand: event.target.value\n        })\n        console.log(event.target.value)\n    }\n\n    handleFormNegotiable = (event) => {\n        this.setState({\n            formNegotiable: event.target.value\n        })\n    }\n\n    handleSubmit = () => {\n        let id = this.state.activeListings.length;\n        let negotiableVar = false;\n        if (this.state.formNegotiable === \"true\") {\n            negotiableVar = true;\n        }\n        let submission = {\n            id: id,\n            product: this.state.formProduct,\n            pricePerPound: this.state.formPrice,\n            demandInPounds: this.state.formDemand,\n            toBeDelivered: 0,\n            negotiable: negotiableVar,\n        }\n        this.state.activeListings.push(submission)\n        let updatedArray = this.state.activeListings\n\n        this.setState({\n            activeListings: updatedArray\n        })\n    }\n\n    toggleAddListing = () => {\n        this.setState(prevState => ({\n            addListingToggled: !prevState.addListingToggled\n          }));\n    }\n\n    render(){    \n\n        let listArray = this.state.activeListings\n\n        return(\n            <>\n                <div className=\"jumbotron-header jumbotron jumbotron-fluid color\">\n                    <div className=\"container\">\n                        <h1 className=\"display-4\">Your Active Listings...</h1>\n                        <p className=\"lead\">Add, remove or edit current listings! ðŸ’µ</p>\n                    </div>\n                </div>\n\n                    <table className=\"ui celled table\">\n                        <thead>\n                            <tr>\n                                <th>Product</th>\n                                <th>Price (per lb)</th>\n                                <th>Demand (lbs)</th>\n                                <th>To be delivered... (lbs)</th>\n                                <th>Negotiable?</th>\n                                <th></th>\n                            </tr>\n                        </thead>       \n                    {listArray.map(listing => {\n                        return(\n                        <tbody>\n                            <tr>\n                                <td>{listing.product}</td>\n                                <td>{listing.pricePerPound}</td>\n                                <td>{listing.demandInPounds}</td>\n                                <td>{listing.toBeDelivered}</td>\n                                <td>{listing.negotiable ? \"Yes\" : \"No\"}</td>\n                            </tr>\n                        </tbody>\n                        )\n                    })}\n                    </table>  \n                    <div>\n                        <button onClick={this.toggleAddListing.bind(this)} className=\"add-listing\">{this.state.addListingToggled ? 'Cancel' : 'Add a listing...'}</button>\n                    </div>\n                    <div>\n                        {this.state.addListingToggled &&\n                            <div className=\"addListingForm\">\n                                    <p>Product: <input onChange={this.handleFormProduct.bind(this)}value={this.state.formProduct} type=\"text\" placeholder=\"Please enter a product...\"/></p>\n                                    <p>Price: <input onChange={this.handleFormPrice.bind(this)} value={this.state.formPrice} type=\"text\" placeholder=\"Please enter a price\"/></p>\n                                    <p>Demand: <input onChange={this.handleFormDemand.bind(this)} value={this.state.formDemand} type=\"text\" placeholder=\"Please enter the demand\"/></p>\n                                    <p>Price negotiable? <input onChange={this.handleFormNegotiable.bind(this)} value={this.state.formNegotiable} type=\"text\" placeholder=\"True or False\" /></p>\n                                    <button className=\"add-listing\" onClick={this.handleSubmit.bind(this)}> Submit</button>\n                            </div>\n                        }\n                    </div>\n                    <div className=\"pendingOffers\">\n                        <div className=\"pendingOffersHeader\">Pending Offers...</div>\n                        {this.state.pendingOffers.map(offer => {\n                            return (\n                            <div class=\"pendingOffer\">\n                                <p>{offer.seller} would like to sell <u>{offer.poundsOfProduct} lbs</u> of <u>{offer.product}</u> for <u>{offer.pricePerPound}</u> per pound for a total of <strong>${offer.poundsOfProduct * offer.pricePerPound}</strong>. Would you like to Accept? <button className=\"buttonAccept\">Accept</button><button className=\"buttonDecline\">Decline</button></p>\n                            </div>\n                            )\n                        })}\n                    </div>\n            </>\n        )\n    }\n}\n\nexport default CoopViewComponent;\n\n\n","import React, { Component } from 'react'\nimport { produceArray } from \"../data.json\";\n//import './checkOut.css'\nimport 'semantic-ui-css/semantic.min.css';\nimport {Modal,Button} from 'react-bootstrap';\n\nexport default class CheckOut extends Component {\n    constructor(){\n        super()\n        this.state = produceArray;\n    }\n\n    render() {\n\n          \n          let rows = this.state;\n        return (\n            <>\n                        <div class=\"jumbotron-header jumbotron jumbotron-fluid color\">\n                            <div class=\"container\">\n                                <h1 class=\"display-4\">Grow-Op</h1>\n                                <p class=\"lead\">Looking to sell your local produce to a food co-op? ðŸ¥•</p>\n                            </div>\n                        </div>\n\n                        <table class=\"ui celled table\">\n                        <thead>\n                            <tr>\n                            <th>Produce</th>\n                            <th>Demand</th>\n                            <th>Price</th>\n                            <th>Buyer</th>\n                            <th>Negotiable?</th>\n                            <th>Looking to Sell?</th>\n\n                            </tr> </thead>\n                        {rows.map( row =>(\n                            <tbody>\n                            <tr>\n                            <td>{row.produceType}</td>\n                            <td>{row.demand}</td>\n                            <td>{row.price}</td>\n                            <td>{row.Buyer}</td>\n                            <td>{row.Negotiable}</td>\n                            \n                            <button class=\"ui secondary button\">\n                                Sell\n                            </button>\n                            </tr>\n\n                            </tbody>\n                         ))}\n\n\n                       \n                       \n\n                        </table>\n\n\n            \n            </>\n        )\n\n\n\n\n\n    }\n}\n\n","import React, {useState, Component} from 'react'\nimport styled from 'styled-components';\nimport Modal from 'react-modal'\n\n\n\n//gives color and shape to the button\nconst Button = styled.button`\n  background-color: #3949ab;\n  color: white;\n  padding: 5px 15px;\n  border-radius: 5px;\n  text-transform: uppercase;\n  &: hover{\n    background-color: #283593\n  }\n`\n\nfunction BuyerSheet() {\n  //saves the data input by the user into variables to use later\n  const [data,setData] = useState(null)\n  const [print,setPrint] = useState(false)\n  const [date, setDate] = useState(null)\n  function  getData(val)\n  {\n    setData(val.target.value)\n    console.warn(val.target.value)\n  }\n  function getDate(val)\n  {\n    setDate(val.target.value)\n    console.warn(val.target.value)\n  }\n  const [modalIsOpen, setModalIsOpen]= useState(false)\n  return (\n    \n    <div className=\"App\">\n      \n          <header className=\"App-header\">\n    \n    \n        <h1>How many Lbs of \"Banana\" are you buying-----<input type = \"number\" onChange={getData}/></h1>\n        <Button onClick = {()=>setPrint(true)}>Submit</Button>\n        <h1>Input your Expected Delivery Date, MM/DD/YYYY------<input type=\"datetime-local\" onChange={getDate}/></h1>\n        {\n        print?\n        <h2>\n          Sell : {data} lbs of \"Banana\" for =$ {data*1.45}\n          </h2>\n         :null\n        } \n        {print?\n        <Button onClick={() => setModalIsOpen(true)}>\n            Complete\n          </Button>\n          :null}\n        <Modal isOpen={modalIsOpen}>\n          <h2>Your Request has Been Submitted</h2>\n\n          <h2>Proposal Summary</h2>\n          <h2>{data} lbs of \"Bananas\".......${data*1.45}</h2>\n\n          <h2>{date} is the expected Date of Delivery</h2>\n          <small>You will recieve a notification via email regarding you proposal</small>\n          <div>\n            <Button onClick = {() =>setModalIsOpen(false)}> Close</Button>\n          </div>\n        </Modal>\n        \n      </header>\n    </div>\n  );\n  \n}\nexport default BuyerSheet;","import './App.css';\nimport CoopViewComponent from './components/CoopViewComponent';\nimport ProducerViewComponent from './components/ProducerViewComponent';\nimport BuyerSheet from './components/BuyerSheet';\nimport { BrowserRouter, Route, Switch, Link } from 'react-router-dom';\n\n \n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          Welcome to the demo!\n        </header>\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/coop-view\">Coop View </Link>\n            </li>\n            <li>\n              <Link to=\"/producer-view\">Producer View</Link>\n            </li>\n            <li>\n              <Link to=\"/producer-sell\">Producer - Sell</Link>\n            </li>\n          </ul>\n        </nav>\n        <Switch>\n          <Route path=\"/coop-view\" component={CoopViewComponent} />\n          <Route path=\"/producer-view\" component={ProducerViewComponent} />\n          <Route path=\"/producer-sell\" component={BuyerSheet} />\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}